---
title: "Car Crash Severity Project"
author: "Daniel Neufeldt"
date: "11/20/2022"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(tidyverse)
library(car)
library(dplyr)
library(gridExtra)
library(randomForest)
library(rpart)
library(tree)
library(caret)
library(class)
library(leaps)
library(MASS)
```


```{r}
setwd("/Users/danielneufeldt/Stats 101C HW 4")
train <- read.csv("Acctrain.csv")
test <- read.csv("AcctestNoYNew.csv")
head(train)
```

```{r}
# head(train)
# table(train$Weather_Condition)
# weather <- function(x) {
#   weather_list <- list()
#   for(i in 1:dim(x)[1]) {
#     if(str_detect(x$Weather_Condition[i], "Clear|Fair|Mostly Cloudy|Drizzle|Light Drizzle|Partly Cloudy|Scattered Clouds|Patches of Fog|Shallow Fog")) {
#       weather_list[i] <- "Light"
#     } else if(str_detect(x$Weather_Condition[i], "Blowing Dust / Windy|Blowing Dust| Cloudy / Windy|Drizzle / Windy|Fair / Windy|Fog|Fog / Windy|Haze|Haze / Windy|Light Rain Shower / Windy|Mostly Cloudy / Windy|Partly Cloudy / Windy|Squalls / Windy|Drizzle and Fog|Rain Shower|Overcast")) {
#       weather_list[i] <- "Mid"
#     } else if(str_detect(x$Weather_Condition[i], "Freezing Rain|Heavy Drizzle|Heavy Rain|Heavy Rain / Windy|Heavy T-Storm|Heavy T-Storm / Windy|Heavy Thunderstorms and Rain|Light Rain Shower|Light Rain with Thunder|Rain|Rain / Windy|Rain Shower|Showers in the Vicinity|Thunderstorms and Rain")) {
#       weather_list[i] <- "Rain"
#     } else {
#       weather_list[i] <- "Heavy"
#     }
#   }
#   return(as.character(weather_list))
# }
# 
# train$weather <- weather(train)
# 
# 
# #str_detect(train$Weather_Condition[1], "Clear|Fair|Mostly Cloudy|Drizzle|Light Drizzle|Partly Cloudy|Scattered Clouds|Patches of Fog|Shallow Fog|")
# #table(train[which(is.na(train$Weather_Condition)),]$Severity)
# #train$Weather_Condition <- ifelse(is.na(train$Weather_Condition), "Fair", train$Weather_Condition)
# table(train$weather)
```

```{r}
# ggplot(train, aes(weather, group = Severity, color = Severity, fill = Severity)) + geom_bar()
```




```{r}
# table(train$weather, train$Severity)

```

```{r}
432/(4983+432)
2395/(22800+2395)
406/(1609+406)
285/(2090 + 285)
```

```{r}
head(train[,c(1,9)], 100)
```



```{r}
# # find all numerical variables and select the best ones
# train_num <- train[,c(4, 5, 6, 7, 8, 20, 21, 22, 23, 24, 26)]
# vec <- c(4, 5, 6, 7, 8, 20, 21, 22, 23, 24, 26)
# which(is.na(train_num))
# impute_med <- apply(train_num, 2, median, na.rm = TRUE)
# for(i in 1:11) {
#   for(j in 1:35000) {
#     if(is.na(train_num[j, i])) {
#       train_num[j,i] <- as.numeric(impute_med[i])
#     }
#   }
# }
# train_num <- data.frame(scale(train_num))
# for(i in 1:11) {
#   index <- vec[i]
#   train[,index] <- train_num[,i]
# }
# head(train)
```
```{r}
# g1 <- ggplot(train, aes(Start_Lat, color = Severity)) + geom_density() #mid 1
# g2 <- ggplot(train, aes(Start_Lng, color = Severity)) + geom_density() # ass 2
# g3 <- ggplot(train, aes(End_Lat, color = Severity)) + geom_density() #mid 3
# g4 <- ggplot(train, aes(End_Lng, color = Severity)) + geom_density() #ass 4
# g5 <- ggplot(train, aes(Distance.mi., color = Severity)) + geom_density() #ass
# g6 <- ggplot(train, aes(Temperature.F., color = Severity)) + geom_density() #ass 5
# g7 <- ggplot(train, aes(Humidity..., color = Severity)) + geom_density() #ass
# g8 <- ggplot(train, aes(Pressure.in., color = Severity)) + geom_density() #ass
# g9 <- ggplot(train, aes(Visibility.mi., color = Severity)) + geom_density() # ass/mid
# g10 <- ggplot(train, aes(Wind_Speed.mph., color = Severity)) + geom_density() # mid
# g11 <- ggplot(train, aes(Wind_Chill.F., color = Severity)) + geom_density() # mid 6
# 
# grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8 ,g9, g10, g11, nrow = 6)
```
```{r}
# train_pred <- train[, c(1, 4, 5, 6, 7, 20, 21, 45)]
# train_pred$weather <- as.factor(train_pred$weather)
# train_pred$Traffic_Signal <- as.factor(train$Traffic_Signal)
# train_pred$Give_Way <- as.factor(train$Give_Way)
# train_pred$Sunrise_Sunset <- as.factor(train$Sunrise_Sunset)
# #train_pred$weather <- ifelse(sum(train_pred$weather == c("Light", "Mid")) == 1, FALSE, TRUE)
# train_pred$weather <- as.factor(train_pred$weather)
# head(train_pred)
```


```{r}
# train_rpart <- rpart(Severity ~ ., data = train_pred)
# summary(train_rpart)
# train_tree <- tree(as.factor(Severity) ~ ., data = train_pred)
# summary(train_tree)
# plot(train_tree)
# text(train_tree, pretty = 0)
```




```{r}
# train <- train %>%
#   mutate(road = as.numeric(str_detect(Description, "(?i)Road")),
#          altrt = as.numeric(str_detect(Description, "(?i)alternate")),
#          caution = as.numeric(str_detect(Description, "(?i)caution")),
#          closed = as.numeric(str_detect(Description, "(?i)closed")),
#          blocked = as.numeric(str_detect(Description, "(?i)blocked")),
#          incident = as.numeric(str_detect(Description, "(?i)incident")))
# head(train)
```

```{r}
# train_pred$rdclosed <- as.factor(train$rdclosed)
# train_pred$altrt <- as.factor(train$altrt)
# train_pred$caution <- as.factor(train$caution)
# train_tree <- tree(as.factor(Severity) ~ ., data = train_pred)
# summary(train_tree)
# plot(train_tree)
# text(train_tree, pretty = 0)

```

```{r}
# test_num <- test[,c(4, 5, 6, 7, 20, 21)]
# impute_med <- apply(test_num, 2, median, na.rm = TRUE)
# for(i in 1:6) {
#   for(j in 1:15000) {
#     if(is.na(test_num[j, i])) {
#       test_num[j,i] <- as.numeric(impute_med[i])
#     }
#   }
# }
# 
# 
# test_num <- data.frame(scale(test_num))
# test_pred <- test_num
# test$Weather_Condition <- ifelse(is.na(test$Weather_Condition), "Fair", test$Weather_Condition)
# test_pred$weather <- as.factor(weather(test))
# test <- test %>%
#   mutate(road = as.numeric(str_detect(Description, "(?i)Road")),
#          altrt = as.numeric(str_detect(Description, "(?i)alternate")),
#          caution = as.numeric(str_detect(Description, "(?i)caution")),
#          closed = as.numeric(str_detect(Description, "(?i)closed")),
#          blocked = as.numeric(str_detect(Description, "(?i)blocked")),
#          incident = as.numeric(str_detect(Description, "(?i)incident")))
# head(train_pred)
# 
# test_pred$Traffic_Signal <- as.factor(test$Traffic_Signal)
# test_pred$Give_Way <- as.factor(test$Give_Way)
# test_pred$Sunrise_Sunset <- as.factor(test$Sunrise_Sunset)
# 
# 
# 
# test_pred$rdclosed <- as.factor(test$rdclosed)
# test_pred$altrt <- as.factor(test$altrt)
# test_pred$caution <- as.factor(test$caution)
# head(test_pred)
# head(train_pred)

```


```{r}
# train_cv = cv.tree(train_tree, FUN = prune.misclass)
# names(train_cv)
# summary(train_cv)
# 
# plot(train_cv$size, train_cv$dev)
# 
# train_pruned <- prune.misclass(train_tree, best = 5)
# plot(train_pruned)
# text(train_pruned, pretty = T)
```
```{r}
# test_prediction <- predict(train_pruned, data = train_pred, newdata = test_pred, type = "class")
# table(test_prediction)
# write.csv(test_prediction, "tree_model_1.csv")
```

```{r}
# sam <- sample(1:35000, 5000, replace = F)
# train_sam <- train[-sam,]
# test_sam <- train[sam,]
```


```{r}
# tree_sam <- tree(as.factor(Severity) ~ ., data = train_sam)
# tree_sam_p <- cv.tree(tree_sam, FUN = prune.misclass)
# plot(tree_sam_p$size, tree_sam_p$dev)
# 
# train_sam_pruned <- prune.misclass(tree_sam, best = 5)
# plot(train_pruned)
# text(train_pruned, pretty = T)
# 
# test_sam_prediction <- predict(train_sam_pruned, data = train_sam, newdata = test_sam, type = "class")
# test_sam_prediction
# 
# table(test_sam_prediction, test_sam$Severity)
# mean(test_sam_prediction != test_sam$Severity)
```



```{r}
# t <- train_sam[, c(1, 47, 48, 49, 50, 51, 52)]
# t_test <- test_sam[, c(1, 47, 48, 49, 50, 51, 52)]
# 
# tree_t <- tree(as.factor(Severity) ~ ., data = t)
# 
# head(test)
# 
# plot(tree_t)
# text(tree_t, pretty = 0)
# 
# t_predict <- predict(tree_t, data = t, newdata = test, type = "class")
# table(t_predict, t_test$Severity)
# mean(t_predict != t_test$Severity)
# 
# train[train$Severity == "SEVERE",c(1, 9)]
# train[train$Severity == "MILD",c(1, 9)]
# str_detect(train[16,9], "(?i)Road closed")
# 
# 
# write.csv(t_predict, "tree_model_road_closed1.csv")
# 
# 
# length(t_predict)
# 
# # incident is an indicator for mild
# # use closed as an indicator for severe instead of road closed
```


```{r}
# train_severe <- train[train$Severity == "SEVERE",]
# train_mild <- train[train$Severity == "MILD",]
# head(train_severe[,c(1, 10)], 20)
# head(train_mild[,c(1, 10)], 20)
# head(train_severe, 30)
# # indexes are 1, 52, 51, 50, 49, 48, 47, 46, 45, 44
# 
# 
# start <- strsplit(train_severe$Start_Time[1], "T|Z")[[1]]
# end <- strsplit(train_severe$End_Time[1], "T|Z")[[1]]
# start <- paste(start[1], start[2], sep = " ")
# start
# end <- paste(end[1], end[2], sep = " ")
# end

```



```{r}
# end <- train_severe$End_Time[1]
# start <- train_severe$Start_Time[1]
# 
# time <- strptime(start, format = "%Y-%m-%d %H:%M:%S")
# 
# difftime(end, start, unit = "hours")
# 
# difftime(train_severe$End_Time[1], train_severe$Start_Time[1], unit = "min")
# start <- strsplit(train_severe$Start_Time, "T|Z")
# end <- strsplit(train_severe$End_Time, "T|Z")
# 
# end[[1]][1]
# 
# difftime(end, start, unit = "hours")
# for(i in 1:length(end)) {
#   end[i] <- paste(end[[i]][1], end[[i]][2], sep = " ")
# }
# for(i in 1:length(start)) {
#   start[i] <- paste(start[[i]][1], start[[i]][2], sep = " ")
# }
# 
# unlist(end)
# 
# difftime(unlist(end), unlist(start), unit = "hours")
# end[[6]]
# start[[6]]
# 
# train$time_diff <- difftime(unlist(end), unlist(start), unit = "hours")
# 
# length(difftime(unlist(end), unlist(start), unit = "hours"))
# 
# head(train_severe, 10)

```

 repeat process but for training data
```{r}
start <- strsplit(train$Start_Time, "T|Z")
end <- strsplit(train$End_Time, "T|Z")

for(i in 1:length(end)) {
  end[i] <- paste(end[[i]][1], end[[i]][2], sep = " ")
}
for(i in 1:length(start)) {
  start[i] <- paste(start[[i]][1], start[[i]][2], sep = " ")
}

time_diff <- difftime(unlist(end), unlist(start), unit = "hours")

train$time_diff <- time_diff

# repeat for test data

start <- strsplit(test$Start_Time, "T|Z")
end <- strsplit(test$End_Time, "T|Z")

for(i in 1:length(end)) {
  end[i] <- paste(end[[i]][1], end[[i]][2], sep = " ")
}
for(i in 1:length(start)) {
  start[i] <- paste(start[[i]][1], start[[i]][2], sep = " ")
}

time_diff <- difftime(unlist(end), unlist(start), unit = "hours")

test$time_diff <- time_diff

head(train)
```


```{r}
# table(train_mod$Astronomical_Twilight)
# 
# train_mod$Astronomical_Twilight <- ifelse(is.na(train_mod$Astronomical_Twilight), "Day", "Night")
# test_mod$Astronomical_Twilight <- ifelse(is.na(test_mod$Astronomical_Twilight), "Day", "Night")
# 
# test_mod$weather <- weather(test)
# 
# 
# 
# train_mod <- train[, c(1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53)]
# head(train_mod)
# 
# 
# test_mod <- test[, c(44, 45, 46, 47, 48, 49, 50, 51, 52, 53)]
# 
# tree_train <- tree(as.factor(Severity) ~., data = train_mod)
# 
# plot(tree_train)
# text(tree_train, pretty = 0)
# 
# tree_train_1 <- predict(tree_train, data = train_mod, newdata = test_mod, type = "class")
# 
# table(tree_train_1, test_sam$Severity)
# mean(tree_train_1 != test_sam$Severity)
# 
# length(tree_train_1)
# 
# 
# test_sam <- train_mod[sam, ]
# train_sam <- train_mod[-sam, ]
# 
# write.csv(tree_train_1, "tree_model_time_difference.csv")

```

Random Forest

```{r}
# rf_train <- randomForest(as.factor(Severity) ~ ., data = train_mod, mtry = 3, importance = T)
# 
# head(train_mod)
# train_mod$Astronomical_Twilight <- as.factor(train_mod$Astronomical_Twilight)
# train_mod$weather <- as.factor(train_mod$weather)
# train_mod$rdclosed <- as.factor(train_mod$rdclosed)
# train_mod$altrt <- as.factor(train_mod$altrt)
# train_mod$caution <- as.factor(train_mod$caution)
# train_mod$road <- as.factor(train_mod$road)
# train_mod$closed <- as.factor(train_mod$closed)
# train_mod$blocked <- as.factor(train_mod$blocked)
# train_mod$incident <- as.factor(train_mod$incident)
# 
# head(test_mod)
# test_mod$Astronomical_Twilight <- as.factor(test_mod$Astronomical_Twilight)
# test_mod$weather <- as.factor(test_mod$weather)
# test_mod$rdclosed <- as.factor(test_mod$rdclosed)
# test_mod$altrt <- as.factor(test_mod$altrt)
# test_mod$caution <- as.factor(test_mod$caution)
# test_mod$road <- as.factor(test_mod$road)
# test_mod$closed <- as.factor(test_mod$closed)
# test_mod$blocked <- as.factor(test_mod$blocked)
# test_mod$incident <- as.factor(test_mod$incident)
# 
# test_mod$Astronomical_Twilight <- ifelse(is.na(test_mod$Astronomical_Twilight), "Day", test_mod$Astronomical_Twilight)
# 
# sum(is.na(test_mod))
# 
# d <- c()
# for(i in 1:35000) {
#   if(sum(is.na(train_mod[i,] > 0))) {
#     d <- c(d, i)
#   }
# }
# d
# train_mod[d[1:20],]
# 
# for(i in 1:35000) {
#   if(is.na(train_mod[i,]$Astronomical_Twilight)) {
#     train_mod[i,]$Astronomical_Twilight <- "Day"
#   }
# }
# summary(rf_train)
# rf_train_prediction <- predict(rf_train, data = train_mod, newdata = test_mod)
# length(rf_train_prediction)
# 
# 
# rf_train_sam <- predict(rf_train, data = train_sam, newdata = test_sam)
# table(rf_train_sam, test_sam$Severity)
# mean(rf_train_sam != test_sam$Severity)
# 
# write.csv(rf_train_prediction, "rand.forest1.csv")




```


```{r}
# library(gbm)
# head(train_mod)
# train_mod$time_diff <- as.numeric(train_mod$time_diff)
# train_mod$Severity <- ifelse(train_mod$Severity == "SEVERE", 0, 1)
# table(train_mod$Severity)
# boost_model <- gbm(as.factor(Severity) ~ ., data = train_mod, distribution = "bernoulli", n.trees = 5000, interaction.depth = 4)
# summary(boost_model)
# boost_train <- predict(boost_model, n.trees = 5000, newdata = test_mod)
# write.csv(boost_train, "rand.forest2.csv")
```

Creating rush hour predictor

```{r}

head(train)
A <- strsplit(train$Start_Time[1], "T|Z")[[1]]
B <- paste(A[1], "17:00:00", sep = " ")
C <- paste(A[1], "14:00:00", sep = " ")
difftime(og, C, unit = "hours")

og <- substring(gsub("T|Z", " ", train$Start_Time[1]), 1, nchar(B))

difftime(B, og, unit = "hours")



rush <- c()
for(i in 1:dim(train)[1]) {
  s <- strsplit(train$Start_Time[i], "T|Z")[[1]]
  seven_pm <- paste(s[1], "17:00:00", sep = " ")
  # four_pm <- paste(s[1], "14:00:00", sep = " ")
  start <- substring(gsub("T|Z", " ", train$Start_Time[i]), 1, nchar(seven_pm))
  before_7 <- difftime(seven_pm, start, unit = "hours")
  # after_4 <- difftime(start, four_pm, unit = "hours")
  if(0 <= before_7 && 3 >= before_7) {
    rush[i] <- TRUE
  } else {
    rush[i] <- FALSE
  }
}

head(rush, 15)
head(train)

train$rush_hour <- rush


# repeat for testing data

rush <- c()
for(i in 1:dim(test)[1]) {
  s <- strsplit(test$Start_Time[i], "T|Z")[[1]]
  seven_pm <- paste(s[1], "17:00:00", sep = " ")
  # four_pm <- paste(s[1], "14:00:00", sep = " ")
  start <- substring(gsub("T|Z", " ", test$Start_Time[i]), 1, nchar(seven_pm))
  before_7 <- difftime(seven_pm, start, unit = "hours")
  # after_4 <- difftime(start, four_pm, unit = "hours")
  if(0 <= before_7 && 3 >= before_7) {
    rush[i] <- TRUE
  } else {
    rush[i] <- FALSE
  }
}

test$rush_hour <- rush
head(test)



# gsub(":", ".", strsplit(train$Start_Time[1], "T|Z")[[1]][2])

```

Creating Precovid predictor

```{r}
train$Date <- as.Date(train$Start_Time)
train$precovid <- ifelse(train$Date < as.Date("2020-04-01"), 1, 0)
train$covid <- ifelse(train$Date > as.Date("2020-04-01") & train$Date < as.Date("2021-01-01"), 1, 0)
train$postcovid <- ifelse(train$Date > as.Date("2021-01-01"), 1, 0)

# do same thing to testing

test$Date <- as.Date(test$Start_Time)
test$precovid <- ifelse(test$Date < as.Date("2020-04-01"), 1, 0)
test$covid <- ifelse(test$Date > as.Date("2020-04-01") & test$Date < as.Date("2021-01-01"), 1, 0)
test$postcovid <- ifelse(test$Date > as.Date("2021-01-01"), 1, 0)
```

Description RegEx

```{r}
train <- train %>%
  mutate(road = as.numeric(str_detect(Description, "(?i)Road")),
         altrt = as.numeric(str_detect(Description, "(?i)alternate")),
         caution = as.numeric(str_detect(Description, "(?i)caution")),
         closed = as.numeric(str_detect(Description, "(?i)closed")),
         blocked = as.numeric(str_detect(Description, "(?i)blocked")),
         incident = as.numeric(str_detect(Description, "(?i)incident")))
head(train)

test <- test %>%
  mutate(road = as.numeric(str_detect(Description, "(?i)Road")),
         altrt = as.numeric(str_detect(Description, "(?i)alternate")),
         caution = as.numeric(str_detect(Description, "(?i)caution")),
         closed = as.numeric(str_detect(Description, "(?i)closed")),
         blocked = as.numeric(str_detect(Description, "(?i)blocked")),
         incident = as.numeric(str_detect(Description, "(?i)incident")))
head(test)
```


Making tree using RegEx, Covid date, and rush hour

```{r}
train_mod <- train[, c(1, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56)]
sam <- sample(1:35000, 5000, replace = F)
test_sample <- train_mod[sam,]
train_sample <- train_mod[-sam,]

test_mod <- test[, c(45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56)]

training_tree <- randomForest(as.factor(Severity) ~ ., data = train_mod, mtry = 10, importance = T)

training_tree_pred_tr <- predict(training_tree, data = train_sample, newdata = test_sample)
training_tree_pred_tr
table(test_sample$Severity, training_tree_pred_tr)
mean(test_sample$Severity != training_tree_pred_tr)

testing_tree_pred <- predict(training_tree, data = train_mod, newdata = test_mod)

write.csv(testing_tree_pred, "randForest_rush.csv") # 0.93333

sort(table(train_severe$Zipcode), decreasing = T)

top_zip <- c(75243, 80229, 33168, 75228, 80216, 80401, 37210, 60607, 20020, 33127, 33150, 60621, 77092, 80104, 80118)



```



Now we try adding zipcodes

```{r}
top_zip <- c(75243, 80229, 33168, 75228, 80216, 80401, 37210, 60607, 20020, 33127, 33150, 60621, 77092, 80104, 80118)
train <- train %>% 
   mutate(
    newzip = str_detect(Zipcode, "75243|80229|33168|75228|80216|80401|37210|60607|20020|33127|33150|60621|77092|80104|80118"),
  )

test <- test %>% 
   mutate(
    newzip = str_detect(Zipcode, "75243|80229|33168|75228|80216|80401|37210|60607|20020|33127|33150|60621|77092|80104|80118"),
  )


```

Instead of using zip codes from the data, let's use zip codes from online and see if there is a difference
```{r}
train <- train %>%
  mutate(
    online_zip = str_detect(Zipcode, "48210|11212|70145|63107|33603|91205|19801|19142|89106|2119"),
  )
test <- test %>%
  mutate(
    online_zip = str_detect(Zipcode, "48210|11212|70145|63107|33603|91205|19801|19142|89106|2119"),
  )

```

Add in Holidays (Memorial day, mothers and fathers day, and fourth of July)
Our dates are from 2016 to 2021, so we need to find the days of memorial day for each year as the date changes

2016: 2016-05-30
2017: 2017-05-29
2018: 2018-05-28
2019: 2019-05-27
2020: 2020-05-25
2021: 2021-05-31

Fourth of July
Just July Fourth of each year

Mothers day
2016: 2016-05-08
2017: 2017-05-14
2018: 2018-05-13
2019: 2019-05-12
2020: 2020-05-10
2021: 2021-05-09

Fathers day
2016: 2016-06-19
2017: 2017-06-18
2018: 2018-06-17
2019: 2019-06-16
2020: 2020-06-21
2021: 2021-06-20


```{r}
train <- train %>% 
  mutate(holiday = str_detect(Start_Time,
                              "2016-05-30|2017-05-29|2018-05-28|2019-05-27|2020-05-25|2021-05-31|2016-07-04|2017-07-04|2018-07-04|2019-07-04|2020-07-04|2021-07-04|2016-05-08|2017-05-14|2018-05-13|2019-05-12|2020-05-10|2021-05-09|2016-06-19|2017-06-18|2018-06-17|2019-06-16|2020-06-21|2021-06-20"),
         )
test <- test %>% 
  mutate(holiday = str_detect(Start_Time,
                              "2016-05-30|2017-05-29|2018-05-28|2019-05-27|2020-05-25|2021-05-31|2016-07-04|2017-07-04|2018-07-04|2019-07-04|2020-07-04|2021-07-04|2016-05-08|2017-05-14|2018-05-13|2019-05-12|2020-05-10|2021-05-09|2016-06-19|2017-06-18|2018-06-17|2019-06-16|2020-06-21|2021-06-20"),
         )
```

Add in most common months with car crashes

```{r}
train$crash_months <- ifelse(str_detect(substring(as.Date(train$Start_Time), 6, 7), "06|07|08|09|10"), 1, 0)
test$crash_months <- ifelse(str_detect(substring(as.Date(test$Start_Time), 6, 7), "06|07|08|09|10"), 1, 0)

train$online_zip <- ifelse(is.na(train$online_zip), F, train$online_zip)
train$newzip <- ifelse(is.na(train$newzip), F, train$newzip)


train_mod <- train[,c(1, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51,  50, 49, 48, 47, 45)]
```


imputing NAs for zipcode

```{r}
ggplot(data = train, aes(time_diff, color = Severity)) + geom_density()
```



```{r}
tree_model <- randomForest(as.factor(Severity) ~ ., data = train_mod, mtry = 7, importance = T)

train_mod_sam <- train_mod[-sam, ]
test_mod_sam <- train_mod[sam, ]
head(train)

tree_model_2 <- randomForest(as.factor(Severity) ~ ., data = train_mod_sam, mtry = 7, importance = T)

test_mod_sam_pred <- predict(tree_model_2, data = train_mod_sam, newdata = test_mod_sam)
table(test_mod_sam_pred, test_mod_sam$Severity)
mean(test_mod_sam_pred != test_mod_sam$Severity)

0.0674 # 6
0.0668 # 7

tree_model_predict <- predict(tree_model, newdata = test_mod)
table(tree_model_predict)

write.csv(tree_model_predict, "randomForest_mtry7.csv")
```

Try adding in states with high teenage driver proportions

insurance
teendrivers
car crashes fatalities teens

```{r}
train <- train %>% 
   mutate(
    insurance = str_detect(State, "DE|LO|NY|GA|MD|MI|NJ|FL|RI|SC"),
    teendrivers = str_detect(State, "KY|MS|NC|MO|WV"),
    ccft = str_detect(State, "WY|SD|MS|MO|AL")
  )

train_mod$insurance <- train$insurance
train_mod$teendrivers <- train$teendrivers
train_mod$ccft <- train$ccft

test <- test %>% 
   mutate(
    insurance = str_detect(State, "DE|LO|NY|GA|MD|MI|NJ|FL|RI|SC"),
    teendrivers = str_detect(State, "KY|MS|NC|MO|WV"),
    ccft = str_detect(State, "WY|SD|MS|MO|AL")
  )

test_mod$insurance <- test$insurance
test_mod$teendrivers <- test$teendrivers
test_mod$ccft <- test$ccft
```

Let's split the states into three categories of deaths per 100,000 population: high, mid, low

```{r}

state_death_rate <- c()
for(i in 1:35000) {
  if(str_detect(train$State[i], "CT|DC|MA|MN|NH|NJ|NY|PA|UT|WA")) {
    state_death_rate[i] <- "Low"
  } else if(str_detect(train$State[i], "AZ|CA|CO|DE|ID|IL|IN|IA|KA|MA|MD|MI|NE|NV|NC|ND|OH|OR|TX|VT|VA|WV|WI")) {
    state_death_rate[i] <- "Mid"
  } else {
    state_death_rate[i] <- "High"
  }
}



table(state_death_rate)

train$state_death_rate <- state_death_rate

train_mod$sdr <- train$state_death_rate

state_death_rate <- c()
for(i in 1:15000) {
  if(str_detect(test$State[i], "CT|DC|MA|MN|NH|NJ|NY|PA|UT|WA|RI")) {
    state_death_rate[i] <- "Low"
  } else if(str_detect(test$State[i], "AZ|CA|CO|DE|ID|IL|IN|IA|KS|MA|MD|MI|NE|NV|NC|ND|OH|OR|TX|VT|VA|WV|WI")) {
    state_death_rate[i] <- "Mid"
  } else {
    state_death_rate[i] <- "High"
  }
}

test$state_death_rate <- state_death_rate
test_mod$sdr <- test$state_death_rate






table(train[train$State == "DC",]$Severity)
130/449


# model <- tree(as.factor(Severity) ~ ., data = train_mod)
# 
# plot(model)
# text(model, pretty = 0)
# 
gc21 <- ggplot(train, aes(state_death_rate, group = Severity, color = Severity, fill = Severity)) + geom_bar()
gc21

table(train[train$state_death_rate == "High",]$Severity)
718/5298
2082/17822
718/8362
```

Try using LDA Model

```{r}
train_mod_sam <- train_mod[-sam,]
test_mod_sam <- train_mod[sam,]

# testing model using samples

lda_train_sam <- glm(as.factor(Severity) ~ ., family = binomial(), data = train_mod_sam)

lda_test_predict_sam <- predict(lda_train_sam, newdata = test_mod_sam, type = "response")
pred_test_sam <- rep("MILD", length(lda_test_predict_sam))
pred_test_sam[lda_test_predict_sam >= 0.5] <- "SEVERE"


table(pred_test_sam, test_mod_sam$Severity)
mean(pred_test_sam != test_mod_sam$Severity)

# actual testing prediction for submission

lda_train <- glm(as.factor(Severity) ~ ., family = binomial(), data = train_mod)

lda_test <- predict(lda_train, newdata = test_mod, type = "response")
pred_test <- rep("MILD", length(lda_test))
pred_test[lda_test >= 0.5] <- "SEVERE"

write.csv(pred_test, "logistic_regression_kaggle.csv")
```

Experiementing with start long/lat and end long/lat

```{r}
table(train$state_death_rate, train$State)

# let's just make state death rate based on states that have 20 or more deaths per 100,000 in fatal accidents

train$high_dr <- ifelse(str_detect(train$State, "AR|MS|SC|WY"), 1, 0)
train_mod$high_dr <- train$high_dr
test$high_dr <- ifelse(str_detect(test$State, "AR|MS|SC|WY"), 1, 0)
test_mod$high_dr <- test$high_dr

model <- tree(as.factor(Severity) ~ ., data = train_mod)

plot(model)
text(model, pretty = 0)

severe_counts <- unname(table(train_severe$State))
mild_counts <- unname(table(train_mild$State))
states <- sort(unique(train$State))
A <- matrix(nrow = 2, ncol = 49)

A[48,1]
for(i in 1:49) {
  top <- states[i]
  bottom <- severe_counts[i] / (severe_counts[i] + mild_counts[i])
  A[1, i] <- top
  A[2, i] <- bottom
}


```


```{r}
head(train)

train <- train %>% 
  mutate(
    roadclosed = str_detect(Description, "(?i)road closed"),
    closeddue = str_detect(Description, "(?i)closed due")
  )
  
test <- test %>% 
  mutate(
    roadclosed = str_detect(Description, "(?i)road closed"),
    closeddue = str_detect(Description, "(?i)closed due")
  )

head(train)

train_mod$roadclosed <- train$roadclosed
train_mod$closeddue <- train$closeddue
test_mod$roadclosed <- test$roadclosed
test_mod$closeddue <- test$closeddue

train_sam <- train_mod[-sam,]
test_sam <- train_mod[sam,]
```

make tree with phrases added in as well

```{r}

model_phrase <- randomForest(as.factor(Severity) ~ ., data = train_mod, mtry = 5, importance = T)
summary(model_phrase)

sum(is.na(test_mod[,22]))

test_phrase_predict <- predict(model_phrase, newdata = test_mod)
sum(is.na(test_phrase_predict))
table(test_phrase_predict)

write.csv(test_phrase_predict, "randomforest_with_1phrase.csv")
head(test_mod); head(train_mod)
train_mod$rush_hour <- train$rush_hour
# add state_death_rate, date, newzip, online_zip, and holiday

test_mod$state_death_rate <- test$state_death_rate
test_mod$Date <- test$Date
test_mod$crash_months <- test$crash_months
test_mod$newzip <- test$newzip
test_mod$online_zip <- test$online_zip
test_mod$holiday <- test$holiday

which(is.na(test_mod$online_zip))
test[c(3394, 8359, 10854, 11231),]
# because of the small amount of NAs in zip, we can just look up the cities and find the zip code from there.
test_mod[3394,]$newzip <- 0
test_mod[8359,]$newzip <- 0
test_mod[10854,]$newzip <- 0
test_mod[11231,]$newzip <- 0
test_mod[3394,]$online_zip <- 0
test_mod[8359,]$online_zip <- 0
test_mod[10854,]$online_zip <- 0
test_mod[11231,]$online_zip <- 0



```
clean up data: differences in lat and long
scale temperature and imput first

```{r}
head(train)
train$diff_lat <- scale(abs(train$End_Lat - train$Start_Lat))
train$diff_lng <- scale(abs(train$End_Lng - train$Start_Lng))
train_mod$diff_lat <- train$diff_lat
train_mod$diff_lng <- train$diff_lng

test$diff_lat <- scale(abs(test$End_Lat - test$Start_Lat))
test$diff_lng <- scale(abs(test$End_Lng - test$Start_Lng))
test_mod$diff_lat <- test$diff_lat
test_mod$diff_lng <- test$diff_lng

combined <- rbind(train[,-1], test[,-1])

c_temp <- combined[,19]
sum(is.na(c_temp))
c_temp_NA <- na.omit(c_temp)
length(c_temp_NA)

for(i in 1:length(c_temp)) {
  med <- median(c_temp_NA)
  if(is.na(c_temp[i])) {
    c_temp[i] <- med
  }
}
combined$Temperature.F. <- c_temp

train$Temperature.F. <- scale(c_temp[1:35000])

train_mod$Temp <- train$Temperature.F.

test$Temperature.F. <- scale(c_temp[35001:50000])
test_mod$Temp <- test$Temperature.F.
```

make random forest with all of 

```{r}
model_phrase_num <- randomForest(as.factor(Severity) ~ ., data = train_mod, mtry = 7, importance = T)

model_phrase_num_pred <- predict(model_phrase_num, newdata = test_mod)
length(model_phrase_num_pred)

table(model_phrase_num_pred) # both of these give us a score of 0.93431
mean(test_phrase_predict != model_phrase_num_pred)



#  14282 714

sum(is.na(model_phrase_num_pred))
write.csv(model_phrase_num_pred, "random_forest_with_2phrases_mtry7.csv")

test_sam_pred <- predict(model_phrase_num, newdata = test_sam)
table(test_sam_pred, test_sam$Severity)
mean(test_sam_pred != test_sam$Severity)


model_tree <- tree(as.factor(Severity) ~ ., data = train_mod)
train_mod$newzip <- as.numeric(train_mod$newzip)
train_mod$online_zip <- as.numeric(train_mod$online_zip)



m <- predict(model_tree, newdata = test_mod, type = 'class')

table(m)

```


